BEGIN
--------------------------------------------------------------------
Q1: Is there any compile error with the following code (if any)?
unsigned int Arr[16];
3[Arr] = 7;
Explain:

there will be compile/syntax error on 3[Arr] = 7;  correct answer should be Arr[3] = 7;


--------------------------------------------------------------------
Q2: What is the difference between the following 3 statements?

const int * px;
	px is a pointer of constant int type 

int const * px;
	px is a pointer of constant int type (same as above)

int * const px;
	px is constant pointer of int type 


Is there any compile error for the following cases?
case1:
	int x = 13;
	const int * px;
	px = & x;

	no error ... content of x is not changed

case 2:
	int x = 13;
	int const * px;
	px = & x;

	no error ... content of x is not changed
	

case 3:
	int x = 13;
	int * const px;
	px = & x;

	error !!! px is constant and may be not changed to point to address of x


--------------------------------------------------------------------
Q3: Write a function to set or clear ith bit of a 32-bit register.
Where ith (0-based) := {0, 1, 2, …, 31 }

void reg_set(volatile unsigned int * pReg, int ith)
{

   for (int k = 0; k < 32; k++)
   {
      pReg |= 1 << ith;
   }

}

void reg_clear(volatile unsigned int * pReg, int ith)
{

   for (int k = 0; k < 32; k++)
   {
      pReg &= ~(1 << ith);
   }

}

--------------------------------------------------------------------
Q4: Write a swap function in C.
void swap(unsigned int * px, unsigned int *py)
{

   unsigned int temp;
 
   temp = *py;
   *py   = *px;
   *px   = temp;   
}

--------------------------------------------------------------------
Q5: What is the output of the following code? (Given: sizeof(unsigned int) is 4) Page 34
unsigned int Arr[16];
unsigned int a0 = (unsigned int) &Arr[0];
unsigned int a3 = (unsigned int) &Arr[3];
printf(“%d\n”, a3 – a0);

12
